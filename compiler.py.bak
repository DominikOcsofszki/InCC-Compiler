from incc.language.lexer.arith_expr import arith_expr_lex
from incc.language.parser.arith_expr import arith_expr_yacc
from incc.language.parser.code_generation import set_generator_module
from incc.compiler.cma import arith_expr
from incc.compiler.cma.ir_to_arm64 import ir_to_arm64,arm64_final_prog
from incc.compiler.cma.arm64_helper import t,l
from configs import Configs
BASE_NAME = "sub"

def _readFromFile(code_file):
    with open(f"{Configs.CODE_DIR.value}/{code_file}") as f:
        data=str(f.read())
        f.close()
        return str.strip(data)

def _printIRCode(stack_code):
    print(f"============IR-CODE==========>>>\n")
    print(stack_code)
    print(f"============IR-CODE==========<<<")

def _printStackCode(prog):
    print(f"======GENERATED:ASM-CODE======>>>")
    print(prog)
    print(f"======GENERATED:ASM-CODE======<<<")

def _writeCodeIRToFile(codeIR):
    f = open(f"{Configs.GENERATED_IR_CODE_DIR.value}/{BASE_NAME}.ir", "w")
    f.write(codeIR)
    f.close()

def _writeProgToFile(prog):
    f = open(f"{Configs.GENERATED_DIR.value}/{BASE_NAME}.s", "w")
    f.write("; ASM_FILE:\n")
    f.write(f"; {BASE_NAME}\n")
    f.write(prog)
    f.close()

def compile_data(data):
    env ={}
    set_generator_module(arith_expr)
    parser = arith_expr_yacc
    ast = parser.parse(input=data)
    codeIR = ast.code(env)
    _printIRCode(codeIR)
    _writeCodeIRToFile(codeIR)
    arm_64_asm = ir_to_arm64(codeIR, env)
    prog = arm64_final_prog(arm_64_asm,"")
    _printStackCode(prog)
    _writeProgToFile(prog)
    print(env)


def compile_file(base_file_name_in_code_dir):
    print(f"\nDIR: {Configs.GENERATED_DIR.value}")
    print(f"Name:   {base_file_name_in_code_dir}.s\n")

    data = _readFromFile(base_file_name_in_code_dir+".incc")
    compile_data(data)

compile_file(BASE_NAME)
